/* ----------------- ToggleUI ------------------ */

Boolean intersect(Vec2 _posA, Vec2 sizeA, Vec2 _posB, Vec2 sizeB) {
  declare Vec2 scaleUp = <160., 90.>;
  declare posA = _posA + scaleUp;
  declare posB = _posB + scaleUp;
  return MathLib::Max(posA.X, posB.X) < MathLib::Min(posA.X + sizeA.X, posB.X + sizeB.X) &&
          MathLib::Max(posA.Y, posB.Y) < MathLib::Min(posA.Y + sizeA.Y, posB.Y + sizeB.Y);
}



Void HideWindow(Boolean _anim, Vec2 WindowOrigin) {
    declare Window = (Page.GetFirstChild("Window") as CMlFrame);
    declare SizeX = TextLib::ToReal(Window.DataAttributeGet("sizex"));
    declare SizeY = TextLib::ToReal(Window.DataAttributeGet("sizey"));

                             //  top, left, right, bottom
    declare Vec2[] positions = [<-160., 91.>, <-161., -90.>,<130., -90.>,<-120., -90.>];
    declare Vec2[] sizes =     [<320., 3.>, <20., 300.>, <30., 300.>, <180., 30.>];
    declare Vec2[] mult =      [<0., 1.>, <-1. ,0.>, <1., 0.>, <0., -1.>];
    declare found = False;
    declare Real posX = WindowOrigin.X;
    declare Real posY = WindowOrigin.Y;
    for(i, 0, 3) {
        if ( intersect(WindowOrigin, <SizeX, SizeY>, positions[i], sizes[i])) {
             posX = WindowOrigin.X + (mult[i].X * SizeX);
             posY = WindowOrigin.Y + (mult[i].Y * SizeY);
             found = True;
        }
    }

    if (found) {
        if (_anim) {
            declare Text position =  posX ^ " " ^ posY;
            AnimMgr.Add(Window, "<frame pos=\""^ position ^"\"/>", 750, CAnimManager::EAnimManagerEasing::BackIn);
        } else {
            Window.RelativePosition_V3 = <posX, posY>;
        }
    } else {
        Window.Hide();
    }

}

Void ShowWindow(Boolean _anim, Vec2 WindowOrigin) {
    declare Window = (Page.GetFirstChild("Window") as CMlFrame);
    Window.Show();
    if (_anim) {
       declare Text position =  WindowOrigin.X ^ " " ^ WindowOrigin.Y ;
       AnimMgr.Add(Window, "<frame pos=\""^ position ^"\"/>", 750, CAnimManager::EAnimManagerEasing::BackOut);
    } else {
        Window.RelativePosition_V3 = <WindowOrigin.X,  WindowOrigin.Y>;
    }
}

***OnInit***
***
declare netwrite Boolean Net_DistractionFreeMode for UI;
declare Boolean Prev_DistractionFreeMode = False;
declare Vec2 WindowOrigin = Page.GetFirstChild("Window").RelativePosition_V3;
declare Window = (Page.GetFirstChild("Window") as CMlFrame);
declare SizeX = TextLib::ToReal(Window.DataAttributeGet("sizex"));
declare SizeY = TextLib::ToReal(Window.DataAttributeGet("sizey"));

if (Net_DistractionFreeMode == True) {
    HideWindow(False, WindowOrigin);
}
***


***Loop***
***
      if (Prev_DistractionFreeMode != Net_DistractionFreeMode) {
          Prev_DistractionFreeMode = Net_DistractionFreeMode;
          if (Net_DistractionFreeMode == True) {
               HideWindow(True, WindowOrigin);
          } else {
               ShowWindow(True, WindowOrigin);
          }
      }
***

/* ----------------- End ToggleUI ------------------ */
